package ru.itmo.nerc.vcb.bot.chat;

import java.util.Objects;
import java.util.StringJoiner;

import org.antlr.v4.runtime.misc.Pair;
import org.telegram.telegrambots.meta.api.objects.Chat;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import lombok.extern.slf4j.Slf4j;
import ru.itmo.nerc.vcb.bot.TelegramBot;
import ru.itmo.nerc.vcb.bot.chat.pending.CodeAuthenticationPending;
import ru.itmo.nerc.vcb.bot.chat.task.TaskContext;
import ru.itmo.nerc.vcb.bot.user.UserContext;
import ru.itmo.nerc.vcb.bot.user.UserRole;
import ru.itmo.nerc.vcb.cfg.ConfigurationHolder;

@Slf4j
public class UserChatContext extends CommonChatContext {
    
    public UserChatContext (Chat chat) {
        super (chat);
    }
    
    @Override
    public boolean onUpdateReceived (Update update) throws TelegramApiException {
        if (update.hasMessage () && update.getMessage ().hasText ()) {
            final var message = update.getMessage ();
            final var commands = ChatUtils.fetchCommand (message);
            log.info ("Fetched commands: {}", commands);
            
            final var user = userContextService.findContextForUser (message.getFrom ());
            
            if (!commands.isEmpty ()) {
                return processCommandsOneByOne (user, message, commands);
            }
        }
        
        log.info ("Delegate update to parent chat context...");
        if (!super.onUpdateReceived (update)) {
            TelegramBot.getInstance ().setReactionOnMessage (update.getMessage (), "üôà");
            return false;
        } else {
            return true;
        }
    }
    
    @Override
    public void processCommand (UserContext user, Message message, Pair <String, String> command) throws CommandProcessingException, TelegramApiException {
        user.setPrivateChatId (chatId);
        
        switch (command.a) {
            case "/authenticate" -> checkAndCall (user, UserRole.UNKNOWN, () -> authenticateUser (user, message, command.b));
            case "/help" -> checkAndCall (user, UserRole.UNKNOWN, () -> printHelp (user));
            case "/mygroup" -> checkAndCall (user, UserRole.PARTICIPANT, () -> printUserGroupInfo (user));
            case "/start" -> checkAndCall (user, UserRole.UNKNOWN, () -> printStartMessage ());
            case "/subscribe", "/join" -> checkAndCall (user, UserRole.PARTICIPANT, () -> subscribeToGroup (user, message, command.b));
            case "/unsubscribe", "/leave" -> checkAndCall (user, UserRole.PARTICIPANT, () -> subscribeToGroup (user, message, null));
            
            default -> super.processCommand (user, message, command);
        };
    }
    
    public void authenticateUser (UserContext user, Message message, String code) throws CommandProcessingException {
        if (code.length () == 0) {
            //throw new CommandProcessingException ("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç–µ—Ä <code>[code]</code>");
            try {
                pendings.add (new CodeAuthenticationPending (this, user));
                throw new PendingAddedException (CodeAuthenticationPending.class);
            } catch (TelegramApiException tapie) {
                log.error ("Failed to add " + CodeAuthenticationPending.class.getSimpleName () + " pending", tapie);
            }
        }
        
        final var credentials = ConfigurationHolder.getConfigurationFromSingleton ().getCredentials ();
        
        for (final var role : UserRole.values ()) {
            if (code != null && Objects.equals (code, credentials.getRoleAuthentication ().get (role))) {
                user.setRole (role);
                
                try {
                    TelegramBot.getInstance ().sendMessage (chatId, cfg -> {
                        cfg.text ("–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è —Ä–æ–ª—å: <b>" + role.getDisplayName () + "</b> üéâ");
                    });
                } catch (TelegramApiException tapie) {
                    log.error ("Failed to send message", tapie);
                }
                
                return;
            }
        }
        
        throw new CommandProcessingException ("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ üò¢");
        
        /*
        try {
            TelegramBot.getInstance ().setReactionOnMessage (message, "üëé");
        } catch (TelegramApiException tapie) {
            log.error ("Failed to reaction message", tapie);
        }
        */
    }
    
    private void printHelp (UserContext user) throws CommandProcessingException {
        final var sj = new StringJoiner ("\n");
        sj.add ("<b>–ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>");
        sj.add ("<i>P </i> /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏");
        sj.add ("<i>P </i> /authenticate <code>[code?]</code> - –°–º–µ–Ω–∏—Ç—å —Å–≤–æ—é —Ä–æ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∫–æ–¥–∞");
        //sj.add ("/dropmessage - –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç—Ç—É –∫–æ–º–∞–Ω–¥—É");
        
        if (user.hasPermissions (UserRole.PARTICIPANT)) {
            sj.add ("");
            sj.add ("<b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤:</b>");
            sj.add ("<i>P </i> /subscribe <code>[group name?]</code> - –°–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã (–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ)");
            sj.add ("<i>P </i> /join <code>[group name?]</code> - –¢–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏ <code>subscribe</code>");
            sj.add ("<i>P </i> /unsubscribe - –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ (–ø–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É)");
            sj.add ("<i>P </i> /leave - –¢–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏ <code>unsubscribe</code>");
            sj.add ("<i>P </i> /mygroup - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ, –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–π –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã");
            sj.add ("<i>PG</i> /eventinfo - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ–±—ã—Ç–∏–∏");
            sj.add (
                "<i>PG</i> " + ANSWER_TASK_COMMAND + " <code>[answer parameters]</code> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É:\n"
                + "* <code>[id]</code> - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏\n"
                + "* <code>[answer]</code> - –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"
            );
        }
        
        if (user.hasPermissions (UserRole.MODERATOR)) {
            sj.add ("");
            sj.add ("<b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:</b>");
            sj.add (
                "<i>PG</i> /createtask <code>[task parameters]</code> - –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É (–∏–ª–∏ –≤–æ–ø—Ä–æ—Å) –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é:\n"
                + "* <code>[task]</code> - —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–≤–æ–ø—Ä–æ—Å)\n"
                + "* <code>[type]</code> - <code>" + TaskContext.TYPE_TASK + "</code> –∏–ª–∏ <code>" + TaskContext.TYPE_QUESTION + "</code>\n"
                + "* <code>(halls)</code> - —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –∫–æ—Ç–æ—Ä—ã–µ –≤–∫–ª—é—á–∏—Ç—å/–∏—Å–∫–ª—é—á–∏—Ç—å"
            );
            sj.add (
                "<i>PG</i> /edittask <code>[task parameters]</code> - –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É (–∏–ª–∏ –≤–æ–ø—Ä–æ—Å) –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é:\n"
                + "* <code>[id]</code> - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏ (–≤–æ–ø—Ä–æ—Å–∞)\n"
                + "* –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∫ —É <code>createtask</code>"
            );
            sj.add (
                "<i>PG</i> /activationtask <code>[task parameters]</code> - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É (–∏–ª–∏ –≤–æ–ø—Ä–æ—Å) –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é:\n"
                + "* <code>[id]</code> - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏ (–≤–æ–ø—Ä–æ—Å–∞)"
            );
        }
        
        sj.add ("");
        sj.add ("<i>–ë—É–∫–≤—ã –ø–µ—Ä–µ–¥ –∫–æ–º–∞–Ω–¥–æ–π:</i>");
        sj.add ("<i>P</i> - –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö");
        sj.add ("<i>G</i> - –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ —Ç–µ–ª–µ–≥—Ä–∞–º–∞");
        
        sj.add ("");
        sj.add ("<i>–ü—Ä–æ—á–∏–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:</i>");
        sj.add ("–°–∏–º–≤–æ–ª <code>?</code> —É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, —Ç–æ –æ–Ω –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ");
        
        try {
            TelegramBot.getInstance ().sendMessage (chatId, cfg -> {
                cfg.text (sj.toString ());
            });
        } catch (TelegramApiException tapie) {
            log.error ("Failed to send message", tapie);
        }
    }
    
    private void printStartMessage () {
        try {
            TelegramBot.getInstance ().sendMessage (chatId, cfg -> {
                cfg.text (
                    "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å!\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö. "
                    + "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É, —Ç–æ –≤–∞–º –º–æ–≥—É—Ç –ø–æ–º–æ—á—å –∫–æ–º–∞–Ω–¥—ã /help –∏ /authenticate"
                );
            });
        } catch (TelegramApiException tapie) {
            log.error ("Failed to send message", tapie);
        }
    }
    
    private void printUserGroupInfo (UserContext user) throws CommandProcessingException {
        if (user.getGroup () == null) {
            try {
                TelegramBot.getInstance ().sendMessage (chatId, cfg -> {
                    cfg.text ("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∏ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø—ã");
                });
            } catch (TelegramApiException tapie) {
                log.error ("Failed to send message", tapie);
            }
        } else {
            final var event = ConfigurationHolder.getConfigurationFromSingleton ().getEvent ();
            final var eventGroup = event.findGroupByName (user.getGroup ());
            if (eventGroup == null) {
                throw new CommandProcessingException ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞");
            }
            
            final var sb = new StringBuilder ();
            sb.append ("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã <b>").append (eventGroup.getDisplayName ()).append ("</b>\n\n");
            
            final var members = userContextService.findGroupMembers (eventGroup.getShortName ()).stream ()
                . filter (member -> member.getUsername () != null)
                . toList ();
            
            sb.append ("<b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã (–≤—Å–µ–≥–æ ").append (members.size ()).append ("):</b> ");
            for (int i = 0; i < members.size (); i++) {
                sb.append ("@").append (members.get (i).getUsername ());
                
                if (i < members.size () - 1) {
                    sb.append (", ");
                }
            }
            
            try {
                TelegramBot.getInstance ().sendMessage (chatId, cfg -> {
                    cfg.text (sb.toString ());
                });
            } catch (TelegramApiException tapie) {
                log.error ("Failed to send message", tapie);
            }
        }
    }
    
}
