package ru.itmo.nerc.vcb.bot.chat;

import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.stream.Collectors;

import org.antlr.v4.runtime.misc.Pair;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.chat.Chat;
import org.telegram.telegrambots.meta.api.objects.message.Message;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import lombok.extern.slf4j.Slf4j;
import ru.itmo.nerc.vcb.bot.TelegramBot;
import ru.itmo.nerc.vcb.bot.chat.ex.CommandProcessingException;
import ru.itmo.nerc.vcb.bot.chat.ex.PendingAddedException;
import ru.itmo.nerc.vcb.bot.chat.pending.CodeAuthenticationPending;
import ru.itmo.nerc.vcb.bot.chat.task.TaskContext;
import ru.itmo.nerc.vcb.bot.chat.utils.ChatUtils;
import ru.itmo.nerc.vcb.bot.user.UserContext;
import ru.itmo.nerc.vcb.bot.user.UserRole;
import ru.itmo.nerc.vcb.cfg.BotEventConfiguration.EventGroup;
import ru.itmo.nerc.vcb.cfg.ConfigurationHolder;

@Slf4j
public class UserChatContext extends CommonChatContext {
    
    public UserChatContext (Chat chat) {
        super (chat);
    }
    
    @Override
    public boolean onUpdateReceived (Update update) throws TelegramApiException {
        if (update.hasMessage () && update.getMessage ().hasText ()) {
            final var message = update.getMessage ();
            final var commands = ChatUtils.fetchCommand (message);
            log.info ("Fetched commands: {}", commands);
            
            final var user = userContextService.findContextForUser (message.getFrom ());
            
            if (!commands.isEmpty ()) {
                return processCommandsOneByOne (user, message, commands);
            }
        }
        
        log.info ("Delegate update to parent chat context...");
        if (!super.onUpdateReceived (update)) {
            TelegramBot.getInstance ().setReactionOnMessage (update.getMessage (), "üôà");
            return false;
        } else {
            return true;
        }
    }
    
    @Override
    public void processCommand (UserContext user, Message message, Pair <String, String> command) throws CommandProcessingException, TelegramApiException {
        user.setPrivateChatId (chatId);
        
        switch (command.a) {
            case "/authenticate" -> checkAndCall (user, UserRole.UNKNOWN, () -> authenticateUser (user, message, command.b));
            case "/help" -> checkAndCall (user, UserRole.UNKNOWN, () -> printHelp (user));
            case "/mygroup" -> checkAndCall (user, UserRole.PARTICIPANT, () -> printUserGroupInfo (user));
            case "/start" -> checkAndCall (user, UserRole.UNKNOWN, this::printStartMessage);
            case "/subscribe", "/join" -> checkAndCall (user, UserRole.PARTICIPANT, () -> subscribeToGroup (user, message, command.b));
            case "/unsubscribe", "/leave" -> checkAndCall (user, UserRole.PARTICIPANT, () -> subscribeToGroup (user, message, null));
            case "/groupsinfo" -> checkAndCall (user, UserRole.MODERATOR, this::printGroupsInfo);
            case "/groupsclear" -> checkAndCall (user, UserRole.MODERATOR, this::clearGroups);
            
            default -> super.processCommand (user, message, command);
        }
    }
    
    public void authenticateUser (UserContext user, Message message, String code) throws CommandProcessingException {
        if (code.length () == 0) {
            try {
                pendings.add (new CodeAuthenticationPending (this, user));
                throw new PendingAddedException (CodeAuthenticationPending.class);
            } catch (TelegramApiException tapie) {
                log.error ("Failed to add " + CodeAuthenticationPending.class.getSimpleName () + " pending", tapie);
            }
        }
        
        final var credentials = ConfigurationHolder.getConfigurationFromSingleton ().getCredentials ();
        
        for (final var role : UserRole.values ()) {
            if (code != null && Objects.equals (code, credentials.getRoleAuthentication ().get (role))) {
                user.setRole (role);
                
                try {
                    TelegramBot.getInstance ().sendMessage (chatId, cfg -> {
                        cfg.text ("–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è —Ä–æ–ª—å: <b>" + role.getDisplayName () + "</b> üéâ");
                    });
                } catch (TelegramApiException tapie) {
                    log.error ("Failed to send message", tapie);
                }
                
                return;
            }
        }
        
        throw new CommandProcessingException ("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ üò¢");
    }
    
    private void printHelp (UserContext user) {
        final var sj = new StringJoiner ("\n");
        sj.add ("<b>–ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>");
        sj.add ("");
        sj.add ("/help ‚Äî <i>[P]</i> –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏");
        sj.add ("");
        sj.add ("/authenticate <code>[code?]</code> ‚Äî <i>[P]</i> –°–º–µ–Ω–∏—Ç—å —Å–≤–æ—é —Ä–æ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∫–æ–¥–∞");
        
        if (user.hasPermissions (UserRole.PARTICIPANT)) {
            sj.add ("");
            sj.add ("<b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤:</b>");
            sj.add ("");
            sj.add ("/subscribe (/join) <code>[group name?]</code> ‚Äî <i>[P]</i> –°–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã (–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ)");
            sj.add ("");
            sj.add ("/unsubscribe (/leave) ‚Äî <i>[P]</i> –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ (–ø–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É)");
            sj.add ("");
            sj.add ("/mygroup ‚Äî <i>[P]</i> –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ, –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–π –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã");
            sj.add ("");
            sj.add ("/eventinfo ‚Äî <i>[PG]</i> –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ–±—ã—Ç–∏–∏");
            sj.add ("");
            sj.add (ANSWER_TASK_COMMAND + " <code>[...parameters]</code> ‚Äî <i>[PG]</i> –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É:");
            sj.add ("    * <code>[id]</code>: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏");
            sj.add ("    * <code>[answer]</code>: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞");
        }
        
        if (user.hasPermissions (UserRole.MODERATOR)) {
            sj.add ("");
            sj.add ("<b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:</b>");
            sj.add ("");
            sj.add ("/groupsinfo ‚Äî <i>[P]</i> –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Å—Ç–∞–≤—ã –≤—Å–µ—Ö –≥—Ä—É–ø–ø");
            sj.add ("");
            sj.add ("/groupsclear ‚Äî <i>[P]</i> –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–∞–≤—ã –≤—Å–µ—Ö –≥—Ä—É–ø–ø");
            sj.add ("");
            sj.add ("/createtask <code>[...parameters]</code> - <i>[PG]</i> –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é:");
            sj.add ("    * <code>[task]</code>: —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–≤–æ–ø—Ä–æ—Å)");
            sj.add ("    * <code>[type]</code>: <code>" + TaskContext.TYPE_TASK + "</code>, <code>" + TaskContext.TYPE_QUESTION + "</code> –∏–ª–∏ <code>" + TaskContext.TYPE_CHECK + "</code>");
            sj.add ("    * <code>[...groups]</code>: —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –∫–æ—Ç–æ—Ä—ã–µ –≤–∫–ª—é—á–∏—Ç—å/–∏—Å–∫–ª—é—á–∏—Ç—å");
            sj.add ("");
            sj.add ("/edittask <code>[...parameters]</code> ‚Äî <i>[PG]</i> –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é:");
            sj.add ("    * <code>[id]</code>: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏");
            sj.add ("    * –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∫ —É <code>/createtask</code>");
            sj.add ("");
            sj.add ("/pingtask <code>[...parameters]</code> ‚Äî <i>[PG]</i> –ù–∞–ø–æ–º–Ω–∏—Ç—å –≥—Ä—É–ø–ø–∞–º –æ –∑–∞–¥–∞—á–µ (–æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π):");
            sj.add ("    * <code>[id]</code>: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏");
            sj.add ("    * <code>[...groups]</code>: —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –∫–æ—Ç–æ—Ä—ã–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å");
            sj.add ("");
            sj.add ("/activationtask <code>[...parameters]</code> ‚Äî <i>[PG]</i> –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é:");
            sj.add ("    * <code>[id]</code>: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏");
            sj.add ("");
            sj.add ("/writemeta <code>[...parameters]</code> ‚Äî <i>[PG]</i> –ó–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞:");
            sj.add ("    * <code>[key]</code>: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏");
            sj.add ("    * <code>[value]</code>: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏");
        }
        
        sj.add ("");
        sj.add ("<b>–ü—Ä–æ—á–∏–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:</b>");
        sj.add ("");
        sj.add ("<i>–ë—É–∫–≤—ã –ø–µ—Ä–µ–¥ –æ–ø–∏—Å–∞–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã:</i>");
        sj.add ("<i>P</i> ‚Äî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö");
        sj.add ("<i>G</i> ‚Äî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ —Ç–µ–ª–µ–≥—Ä–∞–º–∞");
        
        sj.add ("");
        sj.add ("<i>–°–∏–º–≤–æ–ª—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥:</i>");
        sj.add ("–°–∏–º–≤–æ–ª <code>?</code> —É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ‚Äî –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, —Ç–æ –æ–Ω –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ");
        sj.add ("–°–∏–º–≤–æ–ª <code>...</code> —É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ‚Äî –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –Ω–∏–∂–µ), —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö <code>;</code>");
        
        try {
            TelegramBot.getInstance ().sendMessage (chatId, cfg -> {
                cfg.text (sj.toString ());
            });
        } catch (TelegramApiException tapie) {
            log.error ("Failed to send message", tapie);
        }
    }
    
    private void printStartMessage () {
        try {
            TelegramBot.getInstance ().sendMessage (chatId, cfg -> {
                cfg.text (
                    "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å!\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö. "
                    + "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É, —Ç–æ –≤–∞–º –º–æ–≥—É—Ç –ø–æ–º–æ—á—å –∫–æ–º–∞–Ω–¥—ã /help –∏ /authenticate"
                );
            });
        } catch (TelegramApiException tapie) {
            log.error ("Failed to send message", tapie);
        }
    }
    
    private void printUserGroupInfo (UserContext user) throws CommandProcessingException {
        if (user.getGroup () == null) {
            try {
                TelegramBot.getInstance ().sendMessage (chatId, cfg -> {
                    cfg.text ("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ");
                });
            } catch (TelegramApiException tapie) {
                log.error ("Failed to send message", tapie);
            }
        } else {
            final var event = ConfigurationHolder.getConfigurationFromSingleton ().getEvent ();
            final var eventGroup = event.findGroupByName (user.getGroup ());
            if (eventGroup == null) {
                throw new CommandProcessingException ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞");
            }
            
            final var sb = new StringBuilder ();
            sb.append ("–í—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ <b>").append (eventGroup.getDisplayName ()).append ("</b> –∏ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ\n\n");
            
            final var members = userContextService.findGroupMembers (eventGroup.getShortName ()).stream ()
                . filter (member -> member.getUsername () != null)
                . toList ();
            
            sb.append ("<b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã (–≤—Å–µ–≥–æ ").append (members.size ()).append ("):</b> ");
            for (int i = 0; i < members.size (); i++) {
                sb.append ("@").append (members.get (i).getUsername ());
                
                if (i < members.size () - 1) {
                    sb.append (", ");
                }
            }
            
            try {
                TelegramBot.getInstance ().sendMessage (chatId, cfg -> {
                    cfg.text (sb.toString ());
                });
            } catch (TelegramApiException tapie) {
                log.error ("Failed to send message", tapie);
            }
        }
    }
    
    private void printGroupsInfo () {
        final var event = ConfigurationHolder.getConfigurationFromSingleton ().getEvent ();
        final var groups = event.getGroups ().stream ().map (EventGroup::getShortName).toList ();
        final var group2members = userContextService.findGroupsMembers (groups).stream ()
            . filter (member -> member.getUsername () != null)
            . collect (Collectors.groupingBy (UserContext::getGroup));
        
        final var sb = new StringBuilder ();
        for (final var group : event.getGroups ()) {
            final var members = group2members.getOrDefault (group.getShortName (), List.<UserContext> of ());
            
            sb.append ("<b><u>").append (group.getDisplayName ()).append ("</u> (–≤—Å–µ–≥–æ ").append (members.size ()).append ("):</b> ");
            for (int i = 0; i < members.size (); i++) {
                sb.append ("@").append (members.get (i).getUsername ());
                
                if (i < members.size () - 1) {
                    sb.append (", ");
                }
            }
            sb.append ("\n\n");
        }
        
        try {
            TelegramBot.getInstance ().sendMessage (chatId, cfg -> {
                cfg.text (sb.toString ());
            });
        } catch (TelegramApiException tapie) {
            log.error ("Failed to send message", tapie);
        }
    }
    
    private void clearGroups () {
        final var event = ConfigurationHolder.getConfigurationFromSingleton ().getEvent ();
        final var groups = event.getGroups ().stream ().map (EventGroup::getShortName).toList ();
        for (final var member : userContextService.findGroupsMembers (groups)) {
            if (member.getUsername () != null) {
                member.setGroup (null);
                
                try {
                    TelegramBot.getInstance ().sendMessage (member.getPrivateChatId (), cfg -> {
                        cfg.text ("–°–æ—Å—Ç–∞–≤—ã –≥—Ä—É–ø–ø –±—ã–ª–∏ —Ä–∞—Å–ø—É—â–µ–Ω—ã. –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
                    });
                } catch (TelegramApiException tapie) {
                    log.error ("Failed to send message", tapie);
                }
            }
        }
    }
    
}
